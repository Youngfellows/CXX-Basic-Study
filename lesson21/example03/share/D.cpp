#include "../include/D.h"

//在类外定义函数 - 构造函数
D::D()
{
    cout << "D()构造函数" << endl;
}

//在类外定义函数 - 析构函数
D::~D()
{
    cout << "~D()析构函数" << endl;
}

//在类外定义函数 - f1()函数
void D::f7()
{
    cout << "D::f7()函数被调用~~~" << endl;
    // f0();//派生类D的成员函数可以调用基类A的成员函数f0(),因为是private私有继承,不能在类外访问private私有属性方法
    f1();//派生类D的成员函数可以调用基类A的成员函数f1(),因为是private私有继承,f5()函数在类D中是private私有的,可以在类D访问
    f2();//派生类D的成员函数可以调用基类A的成员函数f2(),因为是private私有继承,f5()函数在类D中是private私有的,可以在类D访问
    f3();//派生类D的成员函数可以调用基类B的成员函数f3(),因为是private私有继承,f5()函数在类D中是private私有的,可以在类D访问
    f4();//派生类D的成员函数可以调用基类B的成员函数f4(),因为是private私有继承,f5()函数在类D中是private私有的,可以在类D访问
    f5();//派生类D的成员函数可以调用基类C的成员函数f5(),因为是private私有继承,f5()函数在类D中是private私有的,可以在类D访问
    f6();//派生类D的成员函数可以调用基类C的成员函数f5(),因为是private私有继承,f5()函数在类D中是private私有的,可以在类D访问
}

//在类外定义函数 - f2()函数
void D::f8()
{
    cout << "D::f8()函数被调用~~~" << endl; 
    f7();//访问,f7()函数是protected保护成员,能被类访问 
}