#include "../include/C.h"

//在类外定义函数 - 构造函数
C::C()
{
    cout << "C()构造函数" << endl;
}

//在类外定义函数 - 析构函数
C::~C()
{
    cout << "~C()析构函数" << endl;
}

//在类外定义函数 - f1()函数
void C::f5()
{
    cout << "C::f5()函数被调用~~~" << endl;
    f1();//派生类C的成员函数可以调用基类A的成员函数f1(),因为是public公共继承,f1()函数的访问权限不变是protected保护的,可以访问
    f2();//派生类C的成员函数可以调用基类A的成员函数f2(),因为是public公共继承,f2()函数的访问权限不变是public公共的,可以访问
    f3();//派生类C的成员函数可以调用基类B的成员函数f3(),因为是public公共继承,f3()函数的访问权限不变是protected保护的,可以访问
    f4();//派生类C的成员函数可以调用基类B的成员函数f4(),因为是public公共继承,f4()函数的访问权限不变是public公共的,可以访问
}

//在类外定义函数 - f2()函数
void C::f6()
{
    cout << "C::f6()函数被调用~~~" << endl; 
    f5();//访问,f5()函数是protected保护成员,能被类访问 
}